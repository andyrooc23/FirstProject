#include <M5Core2.h>

// LCD Details
// 320 x 240 pixels (width x height)
//      - (0, 0) is the TOP LEFT pixel
//      - Colors seem to be 16-bit as: RRRR RGGG GGGB BBBB (32 Reds, 64 Greens, 32 Blues)
//      TFT_RED         0xF800      /* 255,   0,   0 */     1111 1000 0000 0000
//      TFT_GREEN       0x07E0      /*   0, 255,   0 */     0000 0111 1110 0000
//      TFT_BLUE        0x001F      /*   0,   0, 255 */     0000 0000 0001 1111

///////////////////////////////////////////////////////////////
// Variables
///////////////////////////////////////////////////////////////
static int red = 0;
static int green = 0;
static int blue = 0;
static const int MAX_RED = 32;
static const int MAX_GREEN = 64;
static const int MAX_BLUE = 32;
int hexColor = 0x0000;
static unsigned long lastTS;

///////////////////////////////////////////////////////////////
// Function declarations
///////////////////////////////////////////////////////////////
static void renderScreen();
static void drawSnowman(int screenWidth, int screenHeight, int snowmanBaseRadius, double ballShrinkFactor);

///////////////////////////////////////////////////////////////
// Put your setup code here, to run once
///////////////////////////////////////////////////////////////
void setup()
{
    // Initialize the device
    M5.begin();
    lastTS = millis();
    renderScreen();
}

///////////////////////////////////////////////////////////////
// Put your main code here, to run repeatedly
///////////////////////////////////////////////////////////////
void loop()
{
    // Check for button input and update color values
    M5.update();
    // Button WAS pressed method
    // if (M5.BtnA.wasPressed()) {
    //     red = (red == MAX_RED) ? 0 : red+1;
    //     renderScreen();
    // }
    // if (M5.BtnB.wasPressed()) {
    //     green = (green == MAX_GREEN) ? 0 : green+1;
    //     renderScreen();
    // }
    // if (M5.BtnC.wasPressed()) {
    //     blue = (blue == MAX_BLUE) ? 0 : blue+1;
    //     renderScreen();
    // }

    // Button IS pressed method
    if (millis() >= lastTS + 50)
    {
        lastTS = millis();
        if (M5.BtnA.isPressed()) {
            red = (red == MAX_RED) ? 0 : red+1;
            renderScreen();
        }
        if (M5.BtnB.isPressed()) {
            green = (green == MAX_GREEN) ? 0 : green+1;
            renderScreen();
        }
        if (M5.BtnC.isPressed()) {
            blue = (blue == MAX_BLUE) ? 0 : blue+1;
            renderScreen();
        }
    }
}

///////////////////////////////////////////////////////////////
// Simple method to draw background and snowman
///////////////////////////////////////////////////////////////
static void renderScreen()
{
    // Combine 3 separate color values into one RGB565 variable and draw screen
    Serial.printf("r=%d, g=%d, b=%d => ", red, green, blue); // Debug print
    hexColor = red << 11 | green << 5 | blue;                // Format will be RRRR RGGG GGGB BBBB
    Serial.printf("0x%04X\n", hexColor);                     // Debug print

    // Fill the screen with the specified color
    M5.Lcd.fillScreen(hexColor); // Draw the background

    // Draw the snowman
    drawSnowman(M5.Lcd.width(), M5.Lcd.height(), M5.Lcd.width() / 6, 0.84);
}

///////////////////////////////////////////////////////////////
// Draws a snowman on the screen with semi-flexible dimensions
///////////////////////////////////////////////////////////////
static void drawSnowman(int screenWidth, int screenHeight, int snowmanBaseRadius, double ballShrinkFactor)
{
    // Set up some variables for use in drawing
    int sWidth = screenWidth;
    int xScreenMid = sWidth / 2;
    int sHeight = screenHeight;
    Serial.printf("%d x %d res\n", sWidth, sHeight);

    // Set up some more variables to programmatically create snowman
    int radius = snowmanBaseRadius;
    int diameter = radius * 2;
    int yOffset = 0;
    //double ballShrinkFactor = .84;

    // TODO 0: Draw the base of the snowman
    // https://docs.m5stack.com/en/api/core2/lcd_api
    M5.Lcd.fillCircle(xScreenMid, sHeight - radius, radius, TFT_WHITE);

    // Save the center location of middle and top circles for later
    int yBodyMid = 0;
    int yHeadMid = 0;

    // TODO 1: Draw the body and head (2 iterations)
    for (int i = 0; i < 2; i++)
    {
        yOffset += diameter * ballShrinkFactor;
        radius *= ballShrinkFactor;
        diameter = radius * 2;
        int yCircleMid = sHeight - yOffset - radius;
        M5.Lcd.fillCircle(xScreenMid, yCircleMid, radius, TFT_WHITE);

        // Save the y location of the body and head for later
        if (i == 0)
            yBodyMid = yCircleMid;
        else if (i == 1)
            yHeadMid = yCircleMid;
    }

    // TODO 2: Draw 3 buttons
    int rButton = 6;
    for (int i = -1; i < 2; i++)
        M5.Lcd.fillCircle(xScreenMid, yBodyMid + (rButton * 3 * i), rButton, TFT_BLACK);

    // TODO 3: Draw 2 eyes
    M5.Lcd.fillCircle(xScreenMid - 15, yHeadMid - 5, rButton, TFT_BLACK);
    M5.Lcd.fillCircle(xScreenMid + 15, yHeadMid - 5, rButton, TFT_BLACK);

    // TODO 4: Draw a carrot nose
    M5.Lcd.fillTriangle(xScreenMid, yHeadMid, xScreenMid, yHeadMid + 16, xScreenMid + 30, yHeadMid + 8, TFT_ORANGE);
}